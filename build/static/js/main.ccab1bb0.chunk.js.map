{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","colorList","useState","quote","setQuote","color","setColor","getQuote","a","Math","floor","random","length","fetch","response","json","data","quotes","item","useEffect","colorStyle","backgroundColor","textStyle","className","style","id","class","text","author","onClick","href","rel","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAkGeA,MA/Ff,WAEE,IAAMC,EAAY,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAdW,EAgBaC,mBAAS,MAhBtB,mBAgBNC,EAhBM,KAgBCC,EAhBD,OAiBWF,mBAAS,MAjBpB,mBAiBRG,EAjBQ,KAiBDC,EAjBC,KAmBPC,EAAQ,uCAAG,kCAAAC,EAAA,6DACfF,EAASL,EAAUQ,KAAKC,MAAMD,KAAKE,SAAWV,EAAUW,UADzC,SAEQC,MACrB,4DAHa,cAETC,EAFS,gBAKIA,EAASC,OALb,OAKTC,EALS,qBAMAA,EAAKC,OANL,GAMRC,EANQ,KAOfd,EAASc,GAPM,2CAAH,qDAWdC,qBAAU,WACRZ,MACC,IAEH,IAAMa,EAAa,CACjBC,gBAAiBhB,GAGbiB,EAAY,CAChBjB,MAAOA,GAGT,OACE,sBACEkB,UAAU,6DACVC,MAAOJ,EAFT,UAIE,oBAAIG,UAAU,sBAAd,kCACA,sBACEE,GAAG,YACHF,UAAU,sDAFZ,UAIE,sBAAKE,GAAG,aAAaF,UAAU,QAA/B,UACE,mBAAGG,MAAM,4BACRvB,GACC,sBAAMsB,GAAG,OAAOF,UAAU,0CAA1B,SACGpB,EAAMwB,UAIb,qBAAKF,GAAG,eAAeF,UAAU,qBAAjC,SACGpB,GACC,uBAAMsB,GAAG,SAASF,UAAU,qBAAqBC,MAAOF,EAAxD,eACKnB,EAAMyB,YAIf,sBACEH,GAAG,UACHF,UAAU,8CAFZ,UAIE,wBACEE,GAAG,YACHF,UAAU,oFACVC,MAAOJ,EACPS,QAAS,kBAAMtB,KAJjB,uBAQA,mBACEkB,GAAG,cACHK,KAAK,mCACLC,IAAI,aACJC,OAAO,SACPT,UAAU,iEACVC,MAAOJ,EANT,SAQE,mBAAGM,MAAM,8BC9ENO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ccab1bb0.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useState, useEffect } from \"react\";\n\nfunction App() {\n  //State\n  const colorList = [\n    \"#16a085\",\n    \"#27ae60\",\n    \"#2c3e50\",\n    \"#f39c12\",\n    \"#e74c3c\",\n    \"#9b59b6\",\n    \"#FB6964\",\n    \"#342224\",\n    \"#472E32\",\n    \"#BDBB99\",\n    \"#77B1A9\",\n    \"#73A857\",\n  ];\n  const [quote, setQuote] = useState(null);\n  let [color, setColor] = useState(null);\n\n  const getQuote = async () => {\n    setColor(colorList[Math.floor(Math.random() * colorList.length)]);\n    const response = await fetch(\n      \"https://goquotes-api.herokuapp.com/api/v1/random?count=1\"\n    );\n    const data = await response.json();\n    const [item] = data.quotes;\n    setQuote(item);\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    getQuote();\n  }, []);\n\n  const colorStyle = {\n    backgroundColor: color,\n  };\n\n  const textStyle = {\n    color: color,\n  };\n\n  return (\n    <div\n      className=\"App flex flex-col justify-center items-center min-h-screen\"\n      style={colorStyle}\n    >\n      <h1 className=\"text-white text-6xl\">Random Quote Machine</h1>\n      <div\n        id=\"quote-box\"\n        className=\"mt-32 w-1/3 bg-white py-8 px-8 rounded-lg shadow-lg\"\n      >\n        <div id=\"quote-text\" className=\"mb-10\">\n          <i class=\"fas fa-quote-left fa-2x\"></i>\n          {quote && (\n            <span id=\"text\" className=\"text-2xl px-3 tracking-wide text-center\">\n              {quote.text}\n            </span>\n          )}\n        </div>\n        <div id=\"quote-author\" className=\"bg-purple-50 mb-10\">\n          {quote && (\n            <span id=\"author\" className=\"italic float-right\" style={textStyle}>\n              - {quote.author}\n            </span>\n          )}\n        </div>\n        <div\n          id=\"buttons\"\n          className=\"mt-24 flex justify-between flex-row-reverse\"\n        >\n          <button\n            id=\"new-quote\"\n            className=\"bg-purple-400 px-3 py-2 rounded-lg text-white focus:outline-none hover:opacity-75\"\n            style={colorStyle}\n            onClick={() => getQuote()}\n          >\n            New Quote\n          </button>\n          <a\n            id=\"tweet-quote\"\n            href=\"https://twitter.com/intent/tweet\"\n            rel=\"noreferrer\"\n            target=\"_blank\"\n            className=\"bg-purple-400 px-3 py-2 rounded-lg text-white hover:opacity-75\"\n            style={colorStyle}\n          >\n            <i class=\"fa fa-twitter\"></i>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}